stages:
  - build
  - deploy
  - cleanup

.base_werf: &base_werf
  - source "$(~/bin/trdl use werf 1.2 stable)"
  - type werf && source $(werf ci-env gitlab --as-file --platform linux/amd64)
  - aws eks --region us-east-2 update-kubeconfig --name briolink-dev
  - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${WERF_REPO}

Build and Publish:
  stage: build
  script:
    - *base_werf
    - werf build --platform linux/amd64
  except:
    - schedules
  tags:
    - docker_spot_runner

.base_deploy: &base_deploy
  stage: deploy
  script:
    - *base_werf
    - werf converge --skip-build --set "env_url=$(echo ${CI_ENVIRONMENT_URL} | cut -d / -f 3)" --platform linux/amd64
  dependencies:
    - Build and Publish
  tags:
    - docker_spot_runner

Deploy to Test:
  <<: *base_deploy
  environment:
    name: test
    url: https://companyservice-service.test.briolink.com
  only:
    - test

Deploy to Development:
  <<: *base_deploy
  environment:
    name: dev
    url: https://companyservice-service.dev.briolink.com
  only:
    - dev

Deploy to Demo:
  <<: *base_deploy
  environment:
    name: demo
    url: https://companyservice-service.demo.briolink.net
  only:
    - demo

Cleanup:
  stage: cleanup
  script:
    - *base_werf
    - werf cleanup --platform linux/amd64
  only:
    - schedules
  tags:
    - docker_spot_runner
