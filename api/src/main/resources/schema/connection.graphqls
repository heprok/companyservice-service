type Connection {
    id: ID!
    buyer: Participant!
    verifySeller: User!
    verificationStage: VerificationStage!
    service: ConnectionService!
    industry: Industry
}

enum VerificationStage {
    Pending
    InProgress
    Verified
}

type Participant {
    id: ID!
    name: String!
    slug: String!
    logo: Image
    role: ConnectionRole!
    verifyUser: User!
}

input ConnectionFilter {
    collaboratorIds: [ID]
    collaboratorRoleIds: [ID]
    industryIds: [ID]
    location: String
    datesOfCollaborators: RangeYear
    verificationStages: [VerificationStage]
}

enum ConnectionSortBy {
    StartCollaboration, NameBuyer
}

type Collaborator {
    id: ID!,
    name: String!,
}


input ConnectionSort{
    sortBy: ConnectionSortBy!
    direction: SortDirection!
}

type ConnectionList implements PaginatedList {
    items: [Connection]
    totalItems: Int!
}

type ConnectionRole {
    id: ID!
    name: String!
    type: ConnectionRoleType!
}


enum ConnectionRoleType {
    Buyer, Seller
}

type ConnectionService {
    id: ID!
    name: String!
    startDate: Int!
    endDate: Int
}

